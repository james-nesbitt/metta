
# launchpad :: uctt.plugin.provisioner:
launchpad:
    type: uctt.plugin.provisioner
    plugin_id: mtt_launchpad

    # Pass these values to the provisioner constructor.  The launchpad
    # constructor accepts override for "where to get config".  The values
    # here tell it to look back in this same location for config, instead of
    # its default of looking in the ./launchpad.yml file
    arguments:
        label: fixtures
        base: launchpad

    backend:
        # Declare what backend output will give us our launchpad yml
        launchpad_output: mke_cluster



        # Provide full plugin configuration for the backend
        # this is isolated on its own to make it more flexible to manage
        plugin:
            plugin_id: uctt_terraform

            # Terraform will configure itself from the ./terraform.yml file
            # This is actually its default but this demonstrates that we have
            # the option.
            arguments:
                label: terraform
                # base: some.path.in.the.file

    cli-options:
        accept-license: true
        disable-telemetry: true

    is_provisioned: "{variables:terraform_is_provisioned}"
    # If true, then launchpad will skip the prepare/apply on the backend
    is_installed: "{variables:launchpad_is_installed}"
    # If true then launchpad will skip the install

    cluster_name: "{variables:cluster_name}"
    # Override cluster name which can be pulled from launchpad yaml

    # the example tf plans need launchpad to run in the plan root
    working_dir: "{variables:terraform_plan}"
    # put the launchpad yml file in the project folder
    config_file: "{variables:files_path}/launchpad/{variables:files_prefix}.yaml"
