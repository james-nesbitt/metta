"""

Health check plugins

Plugins which can be used to determine health of a system.

The usecase for healthchecks is that any functionality can
be added to an environment, and as a collection they can be
used to approve of the health of a system.

Any running component such as a provisioner, a client, or
a workload can be used to provide a health-check plugin so
that a wholistic health check can be run.

"""
from enum import Enum
import time
from typing import List


METTA_PLUGIN_TYPE_HEALTHCHECK = 'healthcheck'
""" metta plugin type identifier for healthcheck plugins """

METTA_HEALTHCHECK_CONFIG_HEALTHCHECKS_LABEL = 'healthchecks'
""" A centralized configerus load label for multiple healthchecks """
METTA_HEALTHCHECK_CONFIG_HEALTHCHECK_LABEL = 'healthcheck'
""" A centralized configerus load label for an healthcheck """
METTA_HEALTHCHECK_CONFIG_HEALTHCHECKS_KEY = 'healthchecks'
""" A centralized configerus key for multiple healthchecks """
METTA_HEALTHCHECK_CONFIG_HEALTHCHECK_KEY = 'healthcheck'
""" A centralized configerus key for one healthcheck """


class HealthStatus(Enum):
    """Status indicator.

    Numerically ordered, with larger value being less healthy (worse)

    Typically anything lower than 3 is still healthy, but -1 means that
    no information is available yet.

    """

    # no health information is availale
    UNKNOWN = -1
    # No health issues have been discovered
    HEALTHY = 0
    # There are some health warnings but no operational defects.
    WARNING = 2
    # Some health errors have been detected
    ERROR = 5
    # Significant health concerns exist.
    CRITICAL = 10


def worse_health_status(first: 'HealthStatus', second: 'HealthStatus') -> 'HealthStatus':
    """Return the worst health status between two."""
    if first.value >= second.value:
        return first
    return second

# yes this is a struct
# pylint: disable=too-few-public-methods
class HealthMessage:
    """A message status combination."""

    def __init__(self, status: HealthStatus, message: str):
        """Create a new message with status value."""
        self.time = time.perf_counter()
        self.status = status
        self.message = message

    def __str__(self) -> str:
        """Convert message instance to string."""
        return f"[{int(self.time)}] {self.status} : {self.message}"

class Health:
    """Health status.

    A temporal health statement, typically generated by a health
    check plugin.

    """

    def __init__(self, status: HealthStatus = HealthStatus.UNKNOWN):
        """Health constructor."""
        self.status: HealthStatus = status
        """Health status for this health object."""
        self.messages: List[HealthMessage] = []

    def merge(self, target: 'Health'):
        """Combine another HealtStatus into the current one."""
        self.status_bump(target.status)
        self.messages.extend(target.messages)
        self.messages.sort(key=lambda x: x.time)

    # Health messages

    def new_message(self, status: HealthStatus, message: str):
        """Add a message of status INFO."""
        health_message = HealthMessage(status=status, message=message)
        self.messages.append(health_message)
        self.status_bump(status=status)

    def info(self, message: str):
        """Add a message of status HEALTHY."""
        self.new_message(status=HealthStatus.HEALTHY, message=message)

    def warning(self, message: str):
        """Add a message of status WARNING."""
        self.new_message(status=HealthStatus.WARNING, message=message)

    def error(self, message: str):
        """Add a message of status ERROR."""
        self.new_message(status=HealthStatus.ERROR, message=message)

    def critical(self, message: str):
        """Add a message of status ERROR."""
        self.new_message(status=HealthStatus.CRITICAL, message=message)

    # Health status interaction

    def status_bump(self, status: HealthStatus):
        """Set status if the passed status is worse than the current status."""
        self.status = worse_health_status(self.status, status)
