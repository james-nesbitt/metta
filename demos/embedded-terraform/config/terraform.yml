# Here this files is used to describe how the terraform provisioner should
# be configured.  This file is directly consumed by the terraform provisioner
# plugin, unless the provisioenr is given a differenet source.

# Note that in our case, the provisioner plugin is define in the fixtures.yml
# file, and we could have put all of this config there - but leaving here makes
# it more readable.

# Here we provide useful information about the metta plugin, but this informatio
# is not actually needed.  The plugin already exists by the time this file is
# read.  The information is here for reader orientation.
type: metta.plugin.provisioner
plugin_id: metta_terraform

# Let's build some values here which can be resued later in the file
# used for resource naming in various places
id: metta-demo

root:
  path: "{{paths:project}}"

# Here we set some meta data paths from the terraform plugin.
# Tell the terraform plugin where to find the tf chart/plan/root-module
plan:
    path: "tf_prodeng_plan"

# Tell the terraform plugin where to put the state file
state:
    path: "tf_prodeng_plan/{{id}}.terraform.state"

# For Terraform variables, the following will be turned into a tfvars.json file
# which can be used to configure the terraform chart.
# @NOTE we could just point to a tfvars file and let you manage that, which may
# an incoming feature, but this method lets you keep all of the tf config in
# one place, and will let you compart the current alues to what was recently
# run.
# @NOTE we don't stricly need a tfvars file, as we could just turn the below
# vars into a vars list and pass them directly to the client. The advantage of
# this approach is that you could use the exported file directly with the tf
# cli without needing metta.

# Where will the vars be written
vars_path: "tf_prodeng_plan/{{id}}.tfvars.json"
# Vars list for terraform
vars:
    # description = "Name used to identify resources and passed to launchpad."
    cluster_name: "{{id}}"

    # description = "A short name/initials which represents the engineer running the test."
    username:  "unconfigured"
    # description = "An arbitrary yet unique string which represents the deployment, eg, 'refactor', 'unicorn', 'stresstest'."
    task_name: demo
    # description = "One of the official cost-tracking project names. Without this, your cluster may get terminated without warning."
    project: metta

    # description = "The max time to allow this cluster to avoid early termination. Can use 'h', 'm', 's' in sane combinations, eg, '15h37m18s'."
    expire_duration: 72h

    # description = "The AWS region to deploy to."
    aws_region: us-east-2

    # description = "The CIDR to use when creating the VPC."
    vpc_cidr: 172.31.0.0/16

    # description = "The UCP admin username to use."
    admin_username: admin
    # description = "The UCP admin password to use."
    admin_password: "orcaorcaorca"
    # description = "The Windows Administrator password to use."
    windows_administrator_password: "tfaws,,ABC..Example"

    # description = "The number of UCP managers to create."
    manager_count: 1
    # description = "The number of UCP Linux workers to create."
    worker_count: 3
    # description = "The number of DTR replicas to create."
    msr_count: 0

    # description = "The number of UCP Windows workers to create."
    windows_worker_count: 0

    #description = "The AWS instance type to use for manager nodes."
    manager_type: m5.xlarge
    # description = "The AWS instance type to use for Linux/Windows worker nodes."
    worker_type: m5.large
    # description = "The AWS instance type to use for DTR replica nodes."
    msr_type: m5.xlarge

    # description = "The volume size (in GB) to use for manager nodes."
    manager_volume_size: 100
    # description = "The volume size (in GB) to use for worker nodes."
    worker_volume_size: 100
    # description = "The volume size (in GB) to use for DTR replica nodes."
    msr_volume_size: 100


    # description = "The selector for the applicable AMI subcollection (ie, 'public' vs 'mirantis')."
    platform_repo: public
    # description = "The Linux platform to use for manager/worker/DTR replica nodes"
    platform: ubuntu_20.04

    # description = "The engine version to deploy across all nodes in the cluster."
    mcr_version: "{{version:mcr_version}}"
    # description = "The channel to pull the engine installer from."
    mcr_channel: "{{version:mcr_channel}}"
    # description = "The repository to source the mcr installer."
    mcr_repo_url: "https://repos-stage.mirantis.com/"
    # description = "Location of Linux installer script."
    mcr_install_url_linux: "https://get.mirantis.com/"
    # description = "Location of Windows installer script."
    mcr_install_url_windows: "https://get.mirantis.com/install.ps1"

    # description = "The UCP version to deploy."
    mke_version: "{{version:mke_version}}"
    # description = "The repository to pull the UCP images from."
    mke_image_repo: "{{version:mke_image_repo}}"
    # description = "The UCP installer flags to use."
    mke_install_flags: []
    # description = "The option to enable/disable Kubernetes as the default orchestrator."
    kube_orchestration: true

    # description = "The DTR version to deploy."
    msr_version: "{{version:msr_version}}"
    # description = "The repository to pull the DTR images from."
    msr_image_repo: "{{version:msr_image_repo}}"
    # description = "The DTR installer flags to use."
    # MSR likes to handle its own TLS and so will use self-signed certs unless giben certs
    msr_install_flags:
        - "--ucp-insecure-tls"
    # description = "Set to 'sequential' to generate sequential replica id's for cluster members, for example 000000000001, 000000000002, etc. ('random' otherwise)"
    # msr_replica_config: sequential

    # description = "The JSON which describes AMI collections (see filename 'platforms.auto.tfvars.json' for details)"
    # platforms:
    #   map(
    #     map(
    #       object({
    #         ami_name  = string
    #         owner     = string
    #         user      = string
    #         interface = string
    #       })
    #     )
    #   )


    # description = "A list of strings (shell commands) to be run before stages."
    # hooks_apply_before:
    #     - ""

    # description = "A list of strings (shell commands) to be run after stages."
    # hooks_apply_after:
    #     - ""

    # description = "If non-empty, use this path/filename as the ssh key file instead of generating automatically."
    ssh_key_file_path: "{{id}}.pem"
