# This config is used primarily for overrides in other config.
# It is handy because then we can focus on this file

# WHAT CAN I PUT HERE?
#
# If you are using the tal variation, then look at metta_mirantis/config/variations/tal
# at the variables file there, and how variables:X are injected into the other config
# files there.
# Note also that values in metta may tell metta to load more variables data from
# other folders in metta_mirantis/config. You can still override those values here

# Used in terraform resource tagging (user:id gets set in conftest.py)
user: "{{user:id?anon}}"
#  arbitrary yet unique string which represents the deployment, eg, 'refactor', 'unicorn', 'stresstest'.
task: "ansible"
# One of the official cost-tracking project names. Without this, your cluster may get terminated without warning.
project: "TAR-TLNG-ATMTN"

# A generic project/user id that we reuse across the configuration
id: "{{user}}-{{task}}"

# prefix for terraform/launchpad files to allow variations
files_prefix: "{{id}}"
# Prefix for terraform resources for identifcation and variations
resource_prefix: "{{id}}"

# where the tal variation should keep runtime paths like terraform state
files_path: "{{paths:project}}/.metta"

# Path to the terraform plan to be used
terraform_plan: "{{mirantis:terraform.plans.prodeng.aws.v11}}"

# AWS region for resources
aws_region: us-east-2

# perhaps not needed any more
cluster_name: "{{id}}"
# used to tag cluster resources for expiry
expire_duration: 72h

# Open a security group for my IP
open_sg_for_myip: False

# Tag any resources with the suite name, and metta preset information
extra_tags:
  owner: "{{user:id?not-specified}}"
  tooling: metta
  metta-suite: "{{task}}"
  metta-mirantis.preset.cluster: "{{mirantis:presets.cluster}}"
  metta-mirantis.preset.platform: "{{mirantis:presets.platform}}"
  purpose: "Testing ansible provisioner"
