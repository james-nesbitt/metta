# In this file we define configuration used to create a Metta Environment.
#
# The environment object acts as a container for fixtures. The object itself
# will be created by the bootstrapper plugin which is defined in the root
# metta.yml file (it points here to define environments).
#
# Typically the bootstrapper creates this as a globally available fixture
# and the mirantis.testing.metta.get_environment() function can be used to
# retrieve it.
#
# The environment plugin we use is a BUILDER environment, which will use
# its own config to automatically build fixtures when it is created. The
# fixtures definition is below, but it typically redirects to a different
# fixtures.yml file.

# Create an environment called 'upgrade'
upgrade:
  # Environment plugin to use
  plugin_id: metta_state_environment

  # this tells metta that this config block should be passed to the plugin
  # for config use (you could tell it to load from a different source.)
  from_config: true

  # Initialize the environment using the following bootstraps
  bootstraps:
    # Metta  environmentbootstraps are passed the environment object
    # and can include plugin registration or directly modify the environment,
    # modify the environment config or manage fixtures.
    - metta_common
    - metta_common_config
    - metta_health
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_ansible
    - metta_launchpad
    - metta_mirantis_common
    - metta_mirantis_presets

  states:
  # Environments can consist of multiple states, each of which maintains its own
  # set of config and fixtures.
  # For this environment we maintain a sequence of states to be used as an
  # upgrade path.

    first:
      plugin_id: state_config
      priority: 50

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      # The following configuration is consumed directly by the state plugin.

      config:
        # Add the following config sources to the state.
        sources:
          state-first-config:
            # Include the config/first path as a config source for this environment
            plugin_id: path
            priority: 80
            path: "{{paths:project-config}}/first"

          # include Environemnt variables as a source of config if they use the format
          # METTA_LABEL[_STEP]*
          # config.get(mylabel).get(one.two.three) would be METTA_FIRST_MYLABEL_ONE_TWO_THREE
          first-env:
            plugin_id: env-specific
            priority: 90
            base: "METTA_FIRST"
          # Also allow an env variable containing json to be used as a dictionary of
          # config source.  There is some chance of collision with the previous plugin
          first-env-json:
            plugin_id: env-json
            priority: 85
            env: METTA_FIRST_CONFIGJSON

      # Tell the state plugin to load fixtures from the following sources
      fixtures:
        # Load the fixtures from fixtures(.yml) source. This will include the
        # fixtures.yml file from any config source merged.
        from_config:
          label: fixtures

    second:
      plugin_id: state_config
      priority: 51

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      # The following configuration is consumed directly by the state plugin.

      config:
        # Add the following config sources to the state.
        sources:
          state-first-config:
            # Include the config/first path as a config source for this environment
            plugin_id: path
            priority: 80
            path: "{{paths:project-config}}/second"

          # include Environemnt variables as a source of config if they use the format
          # METTA_LABEL[_STEP]*
          # config.get(mylabel).get(one.two.three) would be METTA_FIRST_MYLABEL_ONE_TWO_THREE
          first-env:
            plugin_id: env-specific
            priority: 90
            base: "METTA_SECOND"
          # Also allow an env variable containing json to be used as a dictionary of
          # config source.  There is some chance of collision with the previous plugin
          first-env-json:
            plugin_id: env-json
            priority: 85
            env: METTA_SECOND_CONFIGJSON

      # Tell the state plugin to load fixtures from the following sources
      fixtures:
        # Load the fixtures from fixtures(.yml) source. This will include the
        # fixtures.yml file from any config source merged.
        from_config:
          label: fixtures

    third:
      plugin_id: state_config
      priority: 53

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      # The following configuration is consumed directly by the state plugin.

      config:
        # Add the following config sources to the state.
        sources:
          state-third-config:
            # Include the config/first path as a config source for this environment
            plugin_id: path
            priority: 80
            path: "{{paths:project-config}}/third"

          # include Environemnt variables as a source of config if they use the format
          # METTA_LABEL[_STEP]*
          # config.get(mylabel).get(one.two.three) would be METTA_FIRST_MYLABEL_ONE_TWO_THREE
          third-env:
            plugin_id: env-specific
            priority: 90
            base: "METTA_THIRD"
          # Also allow an env variable containing json to be used as a dictionary of
          # config source.  There is some chance of collision with the previous plugin
          third-env-json:
            plugin_id: env-json
            priority: 85
            env: METTA_THIRD_CONFIGJSON

      # Tell the state plugin to load fixtures from the following sources
      fixtures:
        # Load the fixtures from fixtures(.yml) source. This will include the
        # fixtures.yml file from any config source merged.
        from_config:
          label: fixtures
