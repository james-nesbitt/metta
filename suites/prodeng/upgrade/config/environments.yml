# In this file we define configuration used to create a Metta Environment.
#
# The environment object acts as a container for fixtures. The object itself
# will be created by the bootstrapper plugin which is defined in the root
# metta.yml file (it points here to define environments).
#
# Typically the bootstrapper creates this as a globally available fixture
# and the mirantis.testing.metta.get_environment() function can be used to
# retrieve it.
#
# The environment plugin we use is a state BUILDER environment, which will use
# its own config to automatically build a list of states when it is created. The
# state plugins are configured from the states Dict/Map inline.  Each state
# plugin is itself a plugin definition like an environment which should define
# its own fixtures.
#

# Create an environment called 'upgrade'
upgrade:
  # this environment is state based
  plugin_id: metta_state_environment

  # this tells metta that this config block should be passed to the plugin
  # for config use (you could tell it to load from a different source.)
  from_config: true

  bootstraps:
    - metta_common
    - metta_health
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_ansible
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets

  states:

    pre-install:
      # Initial state with no active plugins.  Used to allow manual interaction
      # and management before any activations have taken place.

      plugin_id: metta_state_default

      bootstraps:
        - metta_mirantis_presets
        - metta_common_config

      config:
        sources:
          # include ./config/install as a config source.  This is where we will put
          # all of our project config for first install., although we could just
          # inline it all here.
          install-config:
            plugin_id: path
            priority: 70
            path: "{{paths:project-config}}/install"

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      fixtures:
        from_config:
          # Load the fixtures from fixtures(.yml) source.
          label: fixtures


    install:
      # Installaton phase.
      #
      # In this phase we activate the provisioners to install the first stack
      #

      # we use automatic fixture activation.
      plugin_id: metta_state_labelactivate

      bootstraps:
        - metta_mirantis_presets
        - metta_common_config

      config:
        sources:
          # include ./config/install as a config source.  This is where we will put
          # all of our project config for first install., although we could just
          # inline it all here.
          install-config:
            plugin_id: path
            priority: 70
            path: "{{paths:project-config}}/install"

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      fixtures:
        from_config:
          # Load the fixtures from fixtures(.yml) source.
          label: fixtures

      state-activate:
        # Activate the two main provisioners, installing the base stack
        - instance_id: terraform
          interfaces:
            - provisioner
        - instance_id: launchpad
          interfaces:
            - provisioner


    post-install:
      # Post-installaton phase.
      #
      # In this phase we activate the workloads which are meant to be used after
      # provisioning.
      #

      plugin_id: metta_state_labelactivate

      bootstraps:
        - metta_mirantis_presets
        - metta_common_config

      config:
        sources:
          # include ./config/install as a config source.  This is where we will put
          # all of our project config for first install., although we could just
          # inline it all here.
          install-config:
            plugin_id: path
            priority: 70
            path: "{{paths:project-config}}/install"

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      fixtures:
        from_config:
          # Load the fixtures from fixtures(.yml) source.
          label: fixtures

      state-activate:
        # Activate some of the workloads
        - instance_id: npods-workload
          interfaces:
            - workload
        - instance_id: loki-workload
          interfaces:
            - workload


    upgrade1:
      # First Upgrade phase

      # we use automatic fixture activation.
      plugin_id: metta_state_labelactivate

      bootstraps:
        - metta_mirantis_presets
        - metta_common_config

      config:
        sources:
          # include ./config/upgrade as a config source.  This is where we will put
          # all of our project config for upgrade., although we could just
          # inline it all here.
          upgrade-config:
            plugin_id: path
            priority: 70
            path: "{{paths:project-config}}/upgrade1"

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      fixtures:
        from_config:
          # Load the fixtures from fixtures(.yml) source.
          label: fixtures

      state-activate:
        # Activate the two main provisioners, installing the base stack
        - instance_id: terraform
          interfaces:
            - provisioner
        - instance_id: launchpad
          interfaces:
            - provisioner


    upgrade2:
      # Second upgrade phase

      # we use automatic fixture activation.
      plugin_id: metta_state_labelactivate

      bootstraps:
        - metta_mirantis_presets
        - metta_common_config

      config:
        sources:
          # include ./config/upgrade as a config source.  This is where we will put
          # all of our project config for upgrade., although we could just
          # inline it all here.
          upgrade-config:
            plugin_id: path
            priority: 70
            path: "{{paths:project-config}}/upgrade2"

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      fixtures:
        from_config:
          # Load the fixtures from fixtures(.yml) source.
          label: fixtures

      state-activate:
        # Activate the two main provisioners, installing the base stack
        - instance_id: terraform
          interfaces:
            - provisioner
        - instance_id: launchpad
          interfaces:
            - provisioner


    post-upgrade:
      # Installaton phase.
      #
      # In this phase we activate the provisioners to install the first stack
      #

      # we use automatic fixture activation.
      plugin_id: metta_state_labelactivate

      bootstraps:
        - metta_mirantis_presets
        - metta_common_config

      config:
        sources:
          # include ./config/upgrade as a config source.  This is where we will put
          # all of our project config for upgrade., although we could just
          # inline it all here.
          upgrade-config:
            plugin_id: path
            priority: 70
            path: "{{paths:project-config}}/upgrade2"

      # this tells metta that this config block should be passed to the plugin
      # for config use (you could tell it to load from a different source.)
      from_config: true

      fixtures:
        from_config:
          # Load the fixtures from fixtures(.yml) source.
          label: fixtures

      state-activate:
        # Activate some of the workloads
        - instance_id: healthpoller
          interfaces:
            - workload
