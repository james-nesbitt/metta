# Project bootstrapping configuration.
#
# This config is found and used by the project bootstrapper plugin.
# METTA_BOOTSTRAPPER_PROJECT_PLUGIN_ID = "project_bootstrap"
#
# This format synchs with discovering Metta bootstrapping using the metta
# discover() method.  Alternate bootstrapping is available.
#
# The bootstrapper will create config to provide {{paths:project}}
#

# Instance ID for the bootstrapper plugin
instance_id: metta-pytest

# Also include the following sources of configuration
config:
  sources:
    # include ./config as a config source.  This is where we will put all of our
    # actual project config, although we could just inline it all here.
    project-config:
      plugin_id: path
      priority: 70
      path: "{{paths:project}}/config"

    # include Environemnt variables as a source of config if they use the format
    # METTA_LABEL[_STEP]*
    # config.get(mylabel).get(one.two.three) would be METTA_MYLABEL_ONE_TWO_THREE
    metta-env:
      plugin_id: env-specific
      priority: 90
      base: "METTA"
    # Also allow an env variable containing json to be used as a dictionary of
    # config source.  There is some chance of collision with the previous plugin
    metta-env-json:
      plugin_id: env-json
      priority: 85
      env: METTA_CONFIGJSON

bootstraps:
  - metta_common
  - metta_states

# Tell metta to create environments by loading the environment config label
# which means ./config/environments.yml file because above we provided the
# definition for ./config as a config source.
environments:
  from_config:
    label: environments
