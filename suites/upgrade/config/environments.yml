
# Create an environment called 'before'
#
# We use a single environment for upgrades with 2 states.  The states are:
#  1. before : pre upgrade state
#  2. after : post upgrade state.
#
# The configuration approach is that the two states each include config from
# respective folders 'config/before' and 'config/after'. Each state also allows
# environment variable overrides from different ENV var names.
#
# To use the environment, know that be default the "before" state is active, and
# you will need to run a .set_state('after') operation on the environment to switch
# to the second state.
# The metta cli can run using the after state if you include `--state after` as a
# global flag.
#
upgrade:
  bootstraps:
    metta:
    - metta_common
    - metta_ansible
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets

  # We use two available states here:
  # 1. before: the upgrade test starting state.
  # 2. after: the state which is considered upgraded.
  # The 'before' state is configured as the default
  states:
    default: before
    available:
      before:
        config:
          sources:
            project-config-before:
              # Include teh config/before path as a config source for this environment
              plugin_id: path
              priority: 80
              path: "{{paths:project-config}}/before"

            # include Environemnt variables as a source of config if they use the format
            # METTA_LABEL[_STEP]*
            # config.get(mylabel).get(one.two.three) would be METTA_BEFORE_MYLABEL_ONE_TWO_THREE
            metta-env-before:
              plugin_id: env-specific
              priority: 90
              base: "METTA_BEFORE"
            # Also allow an env variable containing json to be used as a dictionary of
            # config source.  There is some chance of collision with the previous plugin
            metta-env-json-before:
              plugin_id: env-json
              priority: 85
              env: METTA_BEFORE_CONFIGJSON

      after:
        config:
          sources:
            project-config-after:
              plugin_id: path
              priority: 80
              path: "{{paths:project-config}}/after"

            # include Environemnt variables as a source of config if they use the format
            # METTA_LABEL[_STEP]*
            # config.get(mylabel).get(one.two.three) would be METTA_AFTER_MYLABEL_ONE_TWO_THREE
            metta-env-after:
              plugin_id: env-specific
              priority: 90
              base: "METTA_AFTER"
            # Also allow an env variable containing json to be used as a dictionary of
            # config source.  There is some chance of collision with the previous plugin
            metta-env-json-after:
              plugin_id: env-json
              priority: 85
              env: METTA_AFTER_CONFIGJSON


  fixtures:
    from_config:
      # Load the fixtures from fixtures(.yml) source.
      label: fixtures
