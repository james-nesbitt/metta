
# Create an environment called 'before'
#
# This is the initial upgrade state environment.  This creates a full testing
# environment which matches our starting start.  The next state is a different
# environment that will share a lot of settings, and will use the same
# launchpad/terraform/ansible assets - and therefore will modify this testing
# cluster.
#
before:
  bootstraps:
    metta:
    - metta_common
    - metta_ansible
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets

  config:
    sources:
      project-config-before:
        # Include teh config/before path as a config source for this environment
        plugin_id: path
        priority: 80
        path: "{{paths:project-config}}/before"

      # include Environemnt variables as a source of config if they use the format
      # METTA_LABEL[_STEP]*
      # config.get(mylabel).get(one.two.three) would be METTA_MYLABEL_ONE_TWO_THREE
      metta-env-before:
        plugin_id: env-specific
        priority: 90
        base: "METTA_BEFORE"
      # Also allow an env variable containing json to be used as a dictionary of
      # config source.  There is some chance of collision with the previous plugin
      metta-env-json-before:
        plugin_id: env-json
        priority: 85
        env: METTA_BEFORE_CONFIGJSON

  fixtures:
    from_config:
      # Load the fixtures from fixtures(.yml) source.
      label: fixtures

# Create an environment called 'after'
#
# After mimics before in all settings except for those which come from the
# metta_mirantis presets.  This allows a divergence at presets, using the
# same launchpad/terraform/ansible assets - so when we switch environments
# we can apply a delta to achieve a declarative state.
#
after:
  bootstraps:
    metta:
    - metta_common
    - metta_ansible
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets

  config:
    sources:
      project-config-after:
        plugin_id: path
        priority: 80
        path: "{{paths:project-config}}/after"

      # include Environemnt variables as a source of config if they use the format
      # METTA_LABEL[_STEP]*
      # config.get(mylabel).get(one.two.three) would be METTA_MYLABEL_ONE_TWO_THREE
      metta-env-after:
        plugin_id: env-specific
        priority: 90
        base: "METTA_AFTER"
      # Also allow an env variable containing json to be used as a dictionary of
      # config source.  There is some chance of collision with the previous plugin
      metta-env-json-after:
        plugin_id: env-json
        priority: 85
        env: METTA_AFTER_CONFIGJSON

  fixtures:
    from_config:
      # Load the fixtures from fixtures(.yml) source.
      label: fixtures
