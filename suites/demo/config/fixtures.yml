
# launchpad :: uctt.plugin.provisioner:
terraform:
    type: uctt.plugin.provisioner
    plugin_id: uctt_terraform

    # Terraform will configure itself from the ./terraform.yml file
    # This is actually its default but this demonstrates that we have
    # the option of setting any config path desired, including that we
    # could embed the terraform.yml file here.
    arguments:
        label: terraform
        # base: some.path.in.the.file

# ansible :: uctt.plugin.provisioner:
ansible:
    type: uctt.plugin.provisioner
    plugin_id: uctt_ansible

    # Pass these values to the provisioner constructor.
    arguments:
        label: fixtures
        base: ansible

# launchpad :: uctt.plugin.provisioner:
launchpad:
    type: uctt.plugin.provisioner
    plugin_id: mtt_launchpad

    # Pass these values to the provisioner constructor.  The launchpad
    # constructor accepts override for "where to get config".  The values
    # here tell it to look back in this same location for config, instead of
    # its default of looking in the ./launchpad.yml file
    arguments:
        label: fixtures
        base: launchpad

    # Declare which output from the environment will give us our launchpad yml
    # The output needs to exist by the time the launchpad provisioner .apply()
    # runs.
    source_output:
      instance_id: mke_cluster

    cli-options:
        accept-license: true
        disable-telemetry: true

    # To allow pytest and ucttc an other scripts to operate in a subfolder, but
    # to allow us to keep relative paths for things like the working dir,
    # we pass in an optional root path which tells the plugin that any relative
    # paths are to be based on the root path.
    #
    # @NOTE config_file below has its own rules for relative paths below
    root:
      path: "{paths:project}"

    # indicate that launchpad should be run in a particular path as a subprocess
    # CHDIR.  This can be needed if for example an ssh key path is relative to a
    # certain path.
    working_dir: ./tf_prodeng_plan

    # tell the plugin to put the launchpad yml
    #
    # @NOTE that relative paths are assumed to be relative to the working_dir
    #   Basically a decision had to be made on the meaning of a relatice path.
    config_file: ./mtt-demo.yaml



# sanity_docker_run :: uctt.plugin.workload:
sanity_docker_run:
    type: uctt.plugin.workload
    plugin_id: uctt_docker_run

    # Pass these values to the provisioner constructor.
    arguments:
        label: fixtures
        base: sanity_docker_run

    run:
        image: 'hello-world'

# sanity_kubernetes_deployment :: uctt.plugin.workload:
sanity_kubernetes_deployment:
    type: uctt.plugin.workload
    plugin_id: uctt_kubernetes_deployment

    arguments:
        label: fixtures
        base: sanity_kubernetes_deployment

    namespace: "default"
    body:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: nginx-deployment
        labels:
          app: nginx
      spec:
        replicas: 3
        selector:
          matchLabels:
            app: nginx
        template:
          metadata:
            labels:
              app: nginx
          spec:
            containers:
            - name: nginx
              image: nginx:1.15.4
              ports:
              - containerPort: 80
