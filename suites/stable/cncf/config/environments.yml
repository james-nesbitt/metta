# MKE Environments for testing CNCF conformance.
#
# Here we create an environment per testing scenario, which comes down to an
# MKE version, with the relevant MCR version for install, and then the K8S
# version to test against.
#
# @NOTE the first environment is default, so it is used for any runs.  Testing
#    the other environments requires specifying an environment to load.
#
#    metta:
#    `$/> metta --environment=3_3_8 provisioner apply `
#
# @NOTE currently all of the environments use the same settings for config
#    overrides from ENV variables.  That means that you can't target specific
#    environments with overrides from environment variables.  It is a trivial
#    change if it makes sense to do so.
#

# Create environment 3_4_2 for version '3.4.2'
"3_4_2":
  bootstraps:
    metta:
    - metta_common
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets
    - metta_sonobuoy

  config:
    sources:
      cncf-mke-340:
        # Include the config/mke_3.4.1 path as a config source for this environment
        plugin_id: path
        priority: 80
        path: "{{paths:project-config}}/mke_3.4.2"

      # include Environemnt variables as a source of config if they use the format
      # METTA_LABEL[_STEP]*
      # config.get(mylabel).get(one.two.three) would be METTA_MYLABEL_ONE_TWO_THREE
      metta-env:
        plugin_id: env-specific
        priority: 90
        base: "METTA"
      # Also allow an env variable containing json to be used as a dictionary of
      # config source.  There is some chance of collision with the previous plugin
      metta-env-json:
        plugin_id: env-json
        priority: 85
        env: METTA_CONFIGJSON

  fixtures:
    from_config:
      # Load the fixtures from fixtures(.yml) source.
      label: fixtures

# Create environment 3_4_1 for version '3.4.1'
"3_4_1":
  bootstraps:
    metta:
    - metta_common
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets
    - metta_sonobuoy

  config:
    sources:
      cncf-mke-340:
        # Include the config/mke_3.4.1 path as a config source for this environment
        plugin_id: path
        priority: 80
        path: "{{paths:project-config}}/mke_3.4.1"

      # include Environemnt variables as a source of config if they use the format
      # METTA_LABEL[_STEP]*
      # config.get(mylabel).get(one.two.three) would be METTA_MYLABEL_ONE_TWO_THREE
      metta-env:
        plugin_id: env-specific
        priority: 90
        base: "METTA"
      # Also allow an env variable containing json to be used as a dictionary of
      # config source.  There is some chance of collision with the previous plugin
      metta-env-json:
        plugin_id: env-json
        priority: 85
        env: METTA_CONFIGJSON

  fixtures:
    from_config:
      # Load the fixtures from fixtures(.yml) source.
      label: fixtures

# Create environment 3_4_0 for version '3.4.0'
"3_4_0":
  bootstraps:
    metta:
    - metta_common
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets
    - metta_sonobuoy

  config:
    sources:
      cncf-mke-340:
        # Include the config/mke_3.4.0 path as a config source for this environment
        plugin_id: path
        priority: 80
        path: "{{paths:project-config}}/mke_3.4.0"

      # include Environemnt variables as a source of config if they use the format
      # METTA_LABEL[_STEP]*
      # config.get(mylabel).get(one.two.three) would be METTA_MYLABEL_ONE_TWO_THREE
      metta-env:
        plugin_id: env-specific
        priority: 90
        base: "METTA"
      # Also allow an env variable containing json to be used as a dictionary of
      # config source.  There is some chance of collision with the previous plugin
      metta-env-json:
        plugin_id: env-json
        priority: 85
        env: METTA_CONFIGJSON

  fixtures:
    from_config:
      # Load the fixtures from fixtures(.yml) source.
      label: fixtures

# Create environment 3_3_8 for version '3.3.8'
"3_3_8":
  bootstraps:
    metta:
    - metta_common
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets
    - metta_sonobuoy

  config:
    sources:
      cncf-mke-338:
        # Include the config/mke_3.3.8 path as a config source for this environment
        plugin_id: path
        priority: 80
        path: "{{paths:project-config}}/mke_3.3.8"

      # include Environemnt variables as a source of config if they use the format
      # METTA_LABEL[_STEP]*
      # config.get(mylabel).get(one.two.three) would be METTA_MYLABEL_ONE_TWO_THREE
      metta-env:
        plugin_id: env-specific
        priority: 90
        base: "METTA"
      # Also allow an env variable containing json to be used as a dictionary of
      # config source.  There is some chance of collision with the previous plugin
      metta-env-json:
        plugin_id: env-json
        priority: 85
        env: METTA_CONFIGJSON

  fixtures:
    from_config:
      # Load the fixtures from fixtures(.yml) source.
      label: fixtures


# Create environment 3_2_13 for version '3.2.13'
#
# @NOTE we tried a 3.2.13 based environment, but it advertises a deprecated
#    K8S version which our testing tool (sonobuoy) no longer supports.
#    The ./config/mke_3.2.13 config folder is still available but we would have
#    to find a way to support it with version specific tooling.
#
"3_2_13":
  bootstraps:
    metta:
    - metta_common
    - metta_docker
    - metta_kubernetes
    - metta_terraform
    - metta_launchpad
    - metta_common_config
    - metta_mirantis_common
    - metta_mirantis_presets
    - metta_sonobuoy

  config:
    sources:
      cncf-mke-3213:
        # Include the config/mke_3.2.13 path as a config source for this environment
        plugin_id: path
        priority: 80
        path: "{{paths:project-config}}/mke_3.2.13"

      # include Environemnt variables as a source of config if they use the format
      # METTA_LABEL[_STEP]*
      # config.get(mylabel).get(one.two.three) would be METTA_MYLABEL_ONE_TWO_THREE
      metta-env:
        plugin_id: env-specific
        priority: 90
        base: "METTA"
      # Also allow an env variable containing json to be used as a dictionary of
      # config source.  There is some chance of collision with the previous plugin
      metta-env-json:
        plugin_id: env-json
        priority: 85
        env: METTA_CONFIGJSON

  fixtures:
    from_config:
      # Load the fixtures from fixtures(.yml) source.
      label: fixtures
